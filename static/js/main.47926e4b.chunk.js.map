{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","disabled","length","onClick","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","join","filter","element","defaultProps","aboutText","Alert","height","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","toggleMode","document","body","Date","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.47926e4b.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n// import { Link } from 'react-router-dom';\n\nexport default function Navbar(props) {\n    return (\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n            <div className=\"container-fluid\">\n                {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" aria-current=\"page\" href=\"#\">Home</a>\n                            {/* <Link className=\"nav-link\" aria-current=\"page\" to=\"/\">Home</Link> */}\n                        </li>\n                        {/* <li className=\"nav-item\">\n                            <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\n                        </li> */}\n                    </ul>\n                    {/* <div className= {`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\n                    </div> */}\n                    \n                </div>\n            </div>\n        </nav>\n    )\n}\n\nNavbar.propTypes = {\n    title: PropTypes.string.isRequired,\n    aboutText: PropTypes.string.isRequired\n}\n\nNavbar.defaultProps = {\n    title: 'Set title here',\n    aboutText: 'About'\n  };","import React, {useState} from 'react'\n\n\nexport default function TextForm(props) {\n    const handleUpClick = ()=>{\n        let newText = text.toUpperCase();\n        setText(newText)\n        props.showAlert(\"Converted to uppercase!\", \"success\");\n    }\n\n    const handleLoClick = ()=>{ \n        let newText = text.toLowerCase();\n        setText(newText)\n        props.showAlert(\"Converted to lowercase!\", \"success\");\n    }\n\n    const handleClearClick = ()=>{ \n        let newText = '';\n        setText(newText);\n        props.showAlert(\"Text Cleared!\", \"success\");\n    }\n\n    const handleOnChange = (event)=>{\n        setText(event.target.value) \n    }\n\n    // Credits: A\n    const handleCopy = () => {\n        navigator.clipboard.writeText(text); \n        props.showAlert(\"Copied to Clipboard!\", \"success\");\n    }\n\n    // Credits: Coding Wala\n    const handleExtraSpaces = () => {\n        let newText = text.split(/[ ]+/);\n        setText(newText.join(\" \"));\n        props.showAlert(\"Extra spaces removed!\", \"success\");\n    }\n\n    const [text, setText] = useState(''); \n    // text = \"new text\"; // Wrong way to change the state\n    // setText(\"new text\"); // Correct way to change the state\n    return (\n        <>\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}> \n            <h1 className='mb-4'>{props.heading}</h1>\n            <div className=\"mb-3\"> \n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'#13466e':'white', color: props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\n            </div>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>Convert to Uppercase</button>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleLoClick}>Convert to Lowercase</button>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleClearClick}>Clear Text</button>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleCopy}>Copy Text</button>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\n        </div>\n        <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}}>\n            <h2>Your text summary</h2>\n            <p>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\n            <p>{0.008 *  text.split(\" \").filter((element)=>{return element.length!==0}).length} Minutes read</p>\n            <h2>Preview</h2>\n            <p>{text.length>0?text:\"Nothing to preview!\"}</p>\n        </div>\n        </>\n    )\n}\n","import React from 'react'\n\nfunction Alert(props) {\n    const capitalize = (word)=>{\n        const lower = word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n    return (\n        <div style={{height: '50px'}}>\n        {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n           <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg} \n        </div>}\n        </div>\n    )\n}\n\nexport default Alert\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n//import About from './components/About';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n \nfunction App() {\n  const [mode, setMode] = useState('light'); // Whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{\n      setAlert({\n        msg: message,\n        type: type\n      })\n      setTimeout(() => {\n          setAlert(null);\n      }, 1500);\n  }\n\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n  }\n  return (\n    <>\n    {/* <Router> */}\n    <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} key={new Date()} />\n    <Alert alert={alert}/>\n    <div className=\"container my-3\">\n    {/* <Switch> */}\n    {/* /users --> Component 1\n        /users/home --> Component 2 */}\n          {/* <Route exact path=\"/about\"> */}\n            {/* <About mode={mode} /> */}\n          {/* </Route> */}\n          {/* <Route exact path=\"/\"> */}\n            <TextForm showAlert={showAlert} heading=\"Try TextUtils - word counter, character counter, remove extra spaces\" mode={mode}/>\n          {/* </Route>\n    </Switch> */}\n    </div>\n    {/* </Router> */}\n    </> \n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}